#############################################################################
---------------
| Code Added: |
---------------

_______________________________________________________
Makefile:
    $U/_testpgaccess\
_______________________________________________________
kernel/defs.h
    void            vmprint(pagetable_t);
    void            vmprint_start(pagetable_t);
    int             pgaccess(char*, int, int*, pagetable_t);
_______________________________________________________
kernel/riscv.h
    #define PTE_A (1UL << 6) // been accessed
_______________________________________________________
kernel/syscall.c
    [SYS_pgaccess]  sys_pgaccess,
_______________________________________________________
kernel/syscall.h
    #define SYS_pgaccess    25
_______________________________________________________
kernel/sysproc.c

    uint64
    sys_pgaccess(void)
    {
    uint64 start_va; // starting virtual address of the first user page to check
    int num_pages; // number of pages to check
    uint64 bitmap; // user address to store the results into a bitmask

    argaddr(0, &start_va);
    argint(1, &num_pages);
    argaddr(2, &bitmap);
    
    return pgaccess((char*)start_va, num_pages, (int*)bitmap, myproc()->pagetable);
    }
_______________________________________________________
kernel/vm.c
    void
    vmprint(pagetable_t pagetable)
    {
    // there are 2^9 = 512 PTEs in a page table.
    for(int i = 0; i < 512; i++){
        pte_t pte = pagetable[i];
        if (pte & PTE_V){
        for (int j = 0; j < nests; j++){
            printf(" ..");
        }
        printf("%d: ", i); // index into page table
        printf("pte %p ", pte); // page table entry / virtual address
        printf("pa %p \n", PTE2PA(pte)); // physical address

        if((pte & (PTE_R|PTE_W|PTE_X)) == 0){ // this has children
            // this PTE points to a lower-level page table
            nests++;
            uint64 child = PTE2PA(pte);
            vmprint((pagetable_t)child);
            nests--;
        }
        }
    }
    }
###########################################
    void
    vmprint_start(pagetable_t pagetable)
    {
    printf("page table %p\n", pagetable);
    vmprint(pagetable);
    }
###########################################
    // reports which pages have been accessed
    int
    pgaccess(char * start_va, int num_pages, int* bitmap, pagetable_t table)
    {
    pte_t * pte;
    int alloc = 0;

    for (int i = 0; i < num_pages; i++)
    {
        pte = walk(table, (uint64)start_va + (i * PGSIZE), alloc);
        if (((*pte & PTE_V) && (*pte & PTE_A))){
        *pte = *pte ^ PTE_A;  // xor unsets bit in pte
        alloc = (alloc | (1UL << 1));
        }
    }
    either_copyout(1, (uint64)bitmap, &alloc, sizeof(int));
    return 0;
    }
_______________________________________________________
user/testpgaccess.c
    #include "kernel/types.h"
    #include "kernel/stat.h"
    #include "kernel/riscv.h" // defines PGSIZE
    #include "user/user.h"

    int main(int argc, char *argv[])
    {
        char *pageTester;
        int accessBitmap = 0;
        pageTester = malloc(sizeof(int)*8*PGSIZE);

        for (int i = 0; i < sizeof(int)*8; ++i){
            pageTester[i*PGSIZE]=1; // accessed
        }
        if (pgaccess(pageTester,sizeof(int),&accessBitmap) < 0){
            printf("error in pgaccess\n");
        } else {
            for (int i =0; i < sizeof(int)*8; ++i){
                printf("Page %d, accessed: %d\n",
                    i, (accessBitmap & (1<<i))!=0);
            }
        }
        return 0;
    }
_______________________________________________________
user/user.h
    struct pagetable_t;
    int pgaccess(char*, int, int*);


_______________________________________________________
user/usys.pl
    entry("pgaccess");